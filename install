#!/bin/bash
#
# kakoune-anywhere - use Vim whenever, wherever
# Author: Chris Knadler
# Fork: schickm
# Homepage: https://www.github.com/schickm/kakoune-anywhere
#
# Installs kakoune-anywhere. Intended for use via curl:
#
#   $ curl -fsSL https://raw.github.com/schickm/kakoune-anywhere/master/install | bash

set -e

###
# opts
###

while getopts ":v" opt; do
  case "$opt" in
    v) set -x ;;
    \?) echo "Invalid option: -$OPTARG" >&2 ;;
  esac
done

###
# defs
###

err() { echo -e "$@" 1>&2; }

check_installed() { hash $1 &> /dev/null; }

require_installed() {
  if ! check_installed $1; then
    err "kakoune-anywhere requires $1 to function"
    if [[ "$2" != "" ]]; then echo $2; fi
    exit 1
  fi
}

require_one_installed() {
  for file in $*; do
    check_installed $file && return
  done
  err "kakoune-anywhere requires one of the following to be installed:\n$*"
  exit 1
}

AW_PATH=$HOME/.kakoune-anywhere
AW_URL='https://github.com/schickm/kakoune-anywhere'

###
# pre-installation checks
###

# Check if kakoune-anywhere is already installed. If so, remove the previous
# installation.
if [ -a $AW_PATH ]; then
  echo 'Cleaning up previous installation...'
  rm -rf $AW_PATH
  # TODO: It would be nice to have an option for user input here
  # Reinstall kakoune-anywhere (y/n)? ... or something like that
fi

require_installed git

# if we are in a git repo, unset env vars
if git rev-parse --git-dir &> /dev/null; then
  unset $(git rev-parse --local-env-vars) &> /dev/null
fi

# Linux specific checks
if [[ $OSTYPE == "linux-gnu" ]]; then
  require_one_installed gconftool gsettings
  require_installed kak
  require_installed xclip

# OSX specific checks
elif [[ $OSTYPE == "darwin"* ]]; then
  require_installed kak 'Kakoune not found in path. Is it installed?'

# Unsupported OS
else
  echo "OS '$OSTYPE' is not supported!"
  exit 1
fi

###
# installation
###

echo "Installing kakoune-anywhere..."

git clone $AW_URL $AW_PATH

# Linux install
if [[ $OSTYPE == "linux-gnu" ]]; then
  name="kakoune-anywhere"
  binding="<CTRL><ALT>v"
  action=$AW_PATH/bin/run

  # We always try gconftool first. It is deprecated so it won't be on newer
  # installs. If it's installed, we know we are on older versions of Gnome.
  if check_installed gconftool; then
    kbd_path=/desktop/gnome/keybindings/kakoune-anywhere
    gconftool -t str --set $kbd_path/name $name
    gconftool -t str --set $kbd_path/binding $binding
    gconftool -t str --set $kbd_path/action $action

  # At this point, we know we are using dconf, the currently supported settings
  # manager. gsettings is the gnome client for dconf.
  else
    media_keys=org.gnome.settings-daemon.plugins.media-keys
    custom_kbd=org.gnome.settings-daemon.plugins.media-keys.custom-keybinding
    kbd_path=/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/kakoune-anywhere/
    new_bindings=`gsettings get $media_keys custom-keybindings | sed -e"s>'\]>','$kbd_path']>"| sed -e"s>@as \[\]>['$kbd_path']>"`
    gsettings set $media_keys custom-keybindings "$new_bindings"
    gsettings set $custom_kbd:$kbd_path name $name
    gsettings set $custom_kbd:$kbd_path binding $binding
    gsettings set $custom_kbd:$kbd_path command $action
  fi

# OSX install
elif [[ $OSTYPE == "darwin"* ]]; then
  # store the absolute path to the kak executable
  which kak > $AW_PATH/.path

  # install the workflow as a service
  mkdir -p $HOME/Library/Services
  cp -R $AW_PATH/KakouneAnywhere.workflow $HOME/Library/Services

  # TODO: add shortcut
  # It would be great if there was a way to set the keyboard shortcut for
  # kakoune-anywhere programatically (without GUI scripting). If there ends up being a
  # way to do this, it would go here.

  # As a partial workaround, run a script that opens the shortcut options
  echo "Opening System Preferences..."
  osascript $AW_PATH/script/open_shortcuts.scpt &> /dev/null
fi

echo "kakoune-anywhere has been successfully installed!"
